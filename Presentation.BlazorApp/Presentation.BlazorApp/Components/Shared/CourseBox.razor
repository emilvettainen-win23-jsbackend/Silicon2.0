@using Infrastructure.Helpers.Responses
@using Microsoft.AspNetCore.Cors.Infrastructure
@using Presentation.BlazorApp.Models.Courses

@inject IJSRuntime JSRuntime

<div class="courses-grid">

    @foreach (var course in courses)
    {
        <article class="course-card">
            <a href="/courses/details?id=@course.Id">
                <img loading="lazy" class="course-img" src="@(!string.IsNullOrEmpty(@course.CourseImageUrl) ? course.CourseImageUrl : "/images/courses/course-1.svg")" alt="@course.CourseTitle">
                @if (course.IsBestseller)
                {
                    <p class="best-seller text-s">Best Seller</p>
                }
                <div class="card-text">
                    <div class="testar">
                        <h5>@course.CourseTitle</h5>
                        <p class="text-s">By @course.Author.FullName</p>
                        @if (course.Prices.DiscountPrice > 0)
                        {
                            <div class="course-price">
                                <p class="text-lg discount-price">$@course.Prices.DiscountPrice.Value.ToString("F2")</p>
                                <p class="text-lg original-price">$@course.Prices.OriginalPrice.ToString("F2")</p>
                            </div>
                        }
                        else
                        {
                            <p class="text-lg">$@course.Prices.OriginalPrice.ToString("F2")</p>
                        }
                        <span class="border border-1"></span>
                    </div>

                    <div class="card-info">
                        <i class="fa-regular fa-clock">
                            <p class="text-s">@course.Included.HoursOfVideo hours</p>
                        </i>
                        <i class="fa-regular fa-thumbs-up">
                            <p class="text-s">@course.Rating.InProcent% (@(course.Rating.InNumbers / 1000m)K)</p>
                        </i>
                    </div>

                </div>
            </a>
            @if (!IsSavedCourses)
            {
                <button @onclick="@(() => SaveCourseAsync(course.Id))" class="favorite" data-bs-trigger="hover" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Favorite" data-bs-custom-class="custom-tooltip"><i class="fa-solid fa-bookmark"></i></button>
            }
            else
            {
                <button @onclick="@(() => OnRemoveCourseClicked.InvokeAsync(course.Id))" class="favorite" data-bs-toggle="tooltip" data-bs-placement="top" data-bs-title="Remove" data-bs-custom-class="custom-tooltip"><i class="fa-solid fa-bookmark"></i></button>
            }
        </article>
    }
</div>

@code {

    [Parameter]
    public bool IsSavedCourses { get; set; }

    [Parameter]
    public List<CourseBoxModel> courses { get; set; } = null!;


    [Parameter]
    public EventCallback<string> OnRemoveCourseClicked { get; set; }

   
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeTooltips");
        }
    }



    private async Task SaveCourseAsync(string courseId)
    {
        try
        {
            var user = await UserService.GetCurrentUserAsync();
            var result = await CourseService.SaveCourseAsync(user.Id, courseId);
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    break;

                default:
                    break;
            }


        }
        catch (Exception)
        {

            throw;
        }

    }

    // private async Task RemoveCourseAsync(string courseId)
    // {
    //     var user = await UserService.GetCurrentUserAsync();
    //     var result = await CourseService.DeleteOneCourseAsync(user.Id, courseId);
    //     switch (result.StatusCode)
    //     {
    //         case ResultStatus.OK:
    //             var courseToRemove = courses!.FirstOrDefault(c => c.Id == courseId);
    //             courses!.Remove(courseToRemove!);


    //             StateHasChanged();



    //             break;

    //         default:
    //             break;
    //     }

    // }

    // private async Task ReloadCourses(string userId)
    // {
    //     try
    //     {
    //         var savedCourses = await CourseService.GetSavedCourseAsync(user.Id);
    //         courses = await GraphQLService.GetCoursesByIdsAsync(savedCourses);

    //     }
    //     catch (Exception)
    //     {
            
    //         throw;
    //     }
        
    // }

}
