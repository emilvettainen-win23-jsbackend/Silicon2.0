@page "/courses/details/"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]


<PageTitle>Course Details</PageTitle>
@inject ILogger<Index> Logger

@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))


<Toast />

@if (isLoading && !isError)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border m-5" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (isError)
{
    <div>
        <h6 class="pt-5 text-center">We were unable to fetch the course at this moment due to a technical error. Please try again later. If the problem persists, contact our support at support@example.com.</h6>
    </div>
}
else if (course != null)
{
    <section class="single-course-header" style="@(GetBackgroundImageStyle(course.CourseImageUrl!))">
        <div class="container">
            <div class="breadcrumbs">
                <nav>
                    <ol>
                        <li> <a href="/"><i class="fa-regular fa-house me-2"></i>Home</a></li>
                        <li><i class="fa-regular fa-angles-right"></i></li>
                        <li><a href="/courses">Courses</a></li>
                        <li><i class="fa-regular fa-angles-right"></i></li>
                        <li class="active"><a href="/courses/detals?id=@course.Id" class="active">@course.CourseTitle</a></li>
                    </ol>
                </nav>
            </div>
            <div class="badges">
                @if (course.IsBestseller)
                {
                    <p class="text-s">
                        Best Seller
                    </p>
                    <p class="text-s">
                        Digital
                    </p>
                }
                else
                {
                    <p class="text-s">
                        Digital
                    </p>
                }
            </div>
            <h1 class="course-title">@course.CourseTitle</h1>
            <p class="text-lg">@course.CourseIngress</p>
            <div class="course-specs">
                <div class="star-rating">
                    <i class="star fas fa-star"></i>
                    <i class="star fas fa-star"></i>
                    <i class="star fas fa-star"></i>
                    <i class="star fas fa-star"></i>
                    <i class="star far fa-star"></i>
                </div>
                <p>(1.2K reviews)</p>
                <p><i class="fa-regular fa-thumbs-up"></i>@(course.Rating.InNumbers) K likes</p>
                <p><i class="fa-regular fa-clock"></i>@course.Included.HoursOfVideo hours</p>
            </div>
            <div class="course-created">
                <img src="@(!string.IsNullOrEmpty(course.Author.ProfileImageUrl) ? course.Author.ProfileImageUrl : "/images/courses/user-profile.png")" alt="@course.Author.FullName">
                <div>
                    <h6>Created by</h6>
                    <p class="text-m">@course.Author.FullName</p>
                </div>
            </div>
        </div>
    </section>
    <section class="single-course-description">
        <div class="container grid-12">
            <div class="course-content">
                <div class="course-description">
                    <h1>Course Description</h1>
                    <p>@course.CourseDescription</p>
                    <h2>What you´ll learn</h2>
                    <ul class="list-group">
                        @for (int i = 0; i < course.Highlights.Count; i++)
                        {
                            <li><i class="fa-regular fa-circle-check"></i>@course.Highlights[i].Highlight</li>
                        }
                    </ul>
                </div>
                <div class="course-details">
                    <h1>Program Details</h1>
                    @for (int i = 0; i < course.Content.Count; i++)
                    {
                        <div class="details">
                            <div>
                                <h4>@(i + 1)</h4>
                            </div>

                            <div>
                                <h4>
                                    @course.Content[i].Title
                                </h4>
                                <p class="text-m">
                                    @course.Content[i].Description
                                </p>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <aside class="course-include">
                <h4>This course includes:</h4>
                <ul>
                    @if (course.Included.HoursOfVideo > 0)
                    {
                        <li><i class="fa-light fa-display"></i>@course.Included.HoursOfVideo hours on-demand video</li>
                    }
                    @if (course.Included.Articles > 0)
                    {
                        <li><i class="fa-light fa-file-lines"></i>@course.Included.Articles articles</li>
                    }
                    @if (course.Included.Resourses > 0)
                    {
                        <li><i class="fa-light fa-arrow-down-to-bracket"></i>@course.Included.Resourses downloadable resources</li>
                    }
                    @if (course.Included.LifetimeAccess)
                    {
                        <li><i class="fa-light fa-infinity"></i>Full lifetime access</li>
                    }
                    @if (course.Included.Certificate)
                    {
                        <li><i class="fa-light fa-trophy"></i>Certificate of completion</li>
                    }
                </ul>

                @if (course.Price.DiscountPrice > 0)
                {
                    <div class="course-price pb-2">
                        <h2>$@course.Price.DiscountPrice</h2>
                        <p class="text-xl">$@course.Price.OriginalPrice.ToString("F2")</p>
                    </div>
                }
                else
                {
                    <div class="course-price pb-2">
                        <h2>$@course.Price.OriginalPrice.ToString("F2")</h2>
                    </div>
                }
                @* <button @onclick="JoinCourseConfirmAsync" class="btn-theme-large" href="#">Join course</button> *@

                <button disabled="@isBusy" @onclick="JoinCourseConfirmAsync" class="btn-theme-large">
                    @if (isBusy)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    <span>Join course</span>
                </button>

            </aside>
        </div>
    </section>
    <section class="single-course-author">
        <div class="container">
            <img class="author-img" src="@(!string.IsNullOrEmpty(course.Author.ProfileImageUrl) ? course.Author.ProfileImageUrl : "/images/courses/user-profile-default.png")" alt="@course.Author.FullName">
            <div class="author-info">
                <div>
                    <div class="author-information">
                        <p>Learn form the best</p>
                        <h1>@course.Author.FullName</h1>
                        <p>@course.Author.Biography</p>
                    </div>
                    @if (course.Author.SocialMedia != null && !string.IsNullOrEmpty(course.Author.SocialMedia.YouTubeUrl) && !string.IsNullOrEmpty(course.Author.SocialMedia.FacebookUrl))
                    {
                        <div class="author-followers">
                            <a class="youtube btn-theme-m" href="@course.Author.SocialMedia.YouTubeUrl">
                                <i class="fa-brands fa-youtube"></i>
                                @course.Author.SocialMedia.Subscribers Subscribers
                            </a>
                            <a class="facebook btn-theme-m" href="@course.Author.SocialMedia.FacebookUrl">
                                <i class="fa-brands fa-square-facebook"></i>
                                @course.Author.SocialMedia.Followers Followes
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
}
else
{
    <div>
        <h6 class="pt-5 text-center">Currently there are no course.</h6>
    </div>
}



@code {
    private bool isBusy;
    private bool isLoading;
    private bool isError;
    private CourseModel? course;

    [SupplyParameterFromQuery]
    public string? Id { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            NavigationManager.NavigateTo("/not-found");
        }
        await LoadCourseDetails(Id!);
    }


    private async Task LoadCourseDetails(string id)
    {
        isLoading = true;
        try
        {
            course = await GraphQLService.GetCourseByIdAsync(id);
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : CourseDetailsIndex.LoadCourseDetails() :: {ex.Message}");
            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }


    private string GetBackgroundImageStyle(string imageUrl)
    {
        var url = !string.IsNullOrEmpty(imageUrl) ? imageUrl : "/images/courses/course-1.svg";
        return $"background-image: url('{url}');";
    }


    private async Task JoinCourseConfirmAsync()
    {
        isBusy = true;
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;
            var user = await UserService.GetCurrentUserAsync();
            var result = await Http.PostAsJsonAsync($"{Config["ProductProvider"]}", new { Firstname = user.FirstName , UserId = user.Id, Email = user.Email , CourseId = course!.Id, CourseTitle = course.CourseTitle, AuthorName = course.Author.FullName });
            if (result.IsSuccessStatusCode)
            {
                ToastService.ShowToast("An email with confirmation was sent", ToastLevel.Success);
                isBusy = false;
                return;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : CourseDetailsIndex.JoinCourseConfirmAsync() :: {ex.Message}");
        }
        ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
        isBusy = false;
    }

    

}