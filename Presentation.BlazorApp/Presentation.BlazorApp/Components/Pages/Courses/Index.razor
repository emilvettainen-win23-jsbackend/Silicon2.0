@page "/courses"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<PageTitle>Courses</PageTitle>

@using Presentation.BlazorApp.GraphQL
@using Presentation.BlazorApp.Models.Courses
@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))


@inject ILogger<Index> Logger
 



<Toast />


<section class="courses">
    <div class="container">
        
            <div class="courses-options">
                <h1 class="pb-3">Courses</h1>
               
                
                

                <form class="filters">
                    <div class="select">
                        <div class="selected" @onclick="ToggleDropdown">@selectedCategory</div>
                        <div class="select-options" style="@(isDropdownOpen ? "display: block;" : "display: none;")">
                        <div class="option" @onclick="GetAllCoursesAsync" data-value="all">All categories</div>
                            @if (categories != null)
                            {
                                foreach (var category in categories)
                                {
                                    <div class="option" @onclick="() => GetCoursesByCategory(category)" data-value="@category">@category</div>
                                }
                            }
                        </div>
                    </div>
                    <div class="input-search-group">
                    <InputText id="searchQuery" @bind-Value="SearchForm.SearchQuery" name="searchQuery" placeholder="Search courses"  @oninput="HandleSearchInputAsync"/><i class="fa-regular fa-search"></i>
                    </div>
                </form>



            </div>


            @if (isLoading && !isError)
            {
                <div class="d-flex justify-content-center">
                    <div class="spinner-border m-5" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }

           
            else if (isError)
            {
                <div>
                    <h6 class="pt-5 text-center">We were unable to fetch the courses at this moment due to a technical error. Please try again later. If the problem persists, contact our support at support@example.com.</h6>
                </div>
            }
            else if (courses != null && courses.Any())
            {
                <div id="boxes">

                <div class="courses-grid">

                    @foreach (var course in courses)
                    {
                        <article class="course-card">
                            <a href="/courses/details?id=@course.Id">
                                <img loading="lazy" class="course-img" src="@(!string.IsNullOrEmpty(@course.CourseImageUrl) ? course.CourseImageUrl : "/images/courses/course-1.svg")" alt="@course.CourseTitle">
                                @if (course.IsBestseller)
                                {
                                    <p class="best-seller text-s">Best Seller</p>
                                }
                                <div class="card-text">
                                    <div class="testar">
                                        <h5>@course.CourseTitle</h5>
                                        <p class="text-s">By @course.Author.FullName</p>
                                        @if (course.Prices.DiscountPrice > 0)
                                        {
                                            <div class="course-price">
                                                <p class="text-lg discount-price">$@course.Prices.DiscountPrice.Value.ToString("F2")</p>
                                                <p class="text-lg original-price">$@course.Prices.OriginalPrice.ToString("F2")</p>
                                            </div>
                                        }
                                        else
                                        {
                                            <p class="text-lg">$@course.Prices.OriginalPrice.ToString("F2")</p>
                                        }
                                        <span class="border border-1"></span>
                                    </div>

                                    <div class="card-info">
                                        <i class="fa-regular fa-clock">
                                            <p class="text-s">@course.Included.HoursOfVideo hours</p>
                                        </i>
                                        <i class="fa-regular fa-thumbs-up">
                                            <p class="text-s">@course.Rating.InProcent% (@(course.Rating.InNumbers / 1000m)K)</p>
                                        </i>
                                    </div>

                                </div>
                            </a>
                            <button @onclick="@(() => SaveCourseAsync(course.Id))" class="favorite"><i class="fa-solid fa-bookmark"></i><span class="tooltiptext">Favorite</span></button>
                        </article>
                    }
                </div>


                   @*  <Presentation.BlazorApp.Components.Shared.CourseBox @rendermode="InteractiveServer" IsSavedCourses="false" courses="courses" /> *@


                   @*  @if (Model.Pagination != null && Model.Pagination.TotalPages > 1)
                    {
                        <div class="pagination">
                            @for (int i = 1; i <= Model.Pagination.TotalPages; i++)
                            {
                                if (i == Model.Pagination.CurrentPage)
                                {
                                    <span class="btn-theme-small active-pag">@i</span>
                                }
                                else
                                {
                                    <a class="btn-theme-small next-pag" href="@Url.Action("Courses", new { pageNumber = i, pageSize = Model.Pagination.PageSize})">@i</a>
                                }
                            }
                        </div>
                    } *@
                </div>
                

                
            }
            else if (courses != null && !courses.Any() && isSearch)
            {
                <div>
                    <h6 class="pt-5 text-center">Unfortunately, we found no courses matching your search.</h6>
                </div>
            }
            else
            {
                <div>
                    <h6 class="pt-5 text-center">Currently there are no courses.</h6>
                </div>
            }



     
    </div>
</section>

<WorkWithUs />

@code {
    private bool isLoading;
    private bool isError;
    private bool isSearch;
    private bool isDropdownOpen = false;
    private string selectedCategory = "All categories";
    private List<CourseBoxModel>? courses;
    private List<string>? categories;




    // private bool IsPreventKey;

    // public bool HandleKeyDown(KeyboardEventArgs e)
    // {
    //     if (e.Key == "Enter")
    //     {
    //         return true;

    //     }
    //     return false;

    // }



    [SupplyParameterFromForm]
    private CourseSearchModel SearchForm { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        if (courses == null)
        {
            await LoadInitialDataAsync();
        }
    }




    private async Task LoadInitialDataAsync()
    {
        try
        {
            isLoading = true;
            categories = await GraphQLService.GetAllCategoriesAsync();
            courses = await GraphQLService.GetAllCoursesAsync();


        }
        catch (Exception ex)
        {
            isError = true;
            Logger.LogError($"ERROR : CoursesIndex.LoadInitialDataAsync() :: {ex.Message}");
        }
        finally
        {
            isLoading = false;

        }
    }


    private async Task SaveCourseAsync(string courseId)
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var currentUser = authState.User;

            var user = await UserService.GetCurrentUserAsync();
            var result = await CourseService.SaveCourseAsync(user.Id, courseId);
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    ToastService.ShowToast("Course saved", ToastLevel.Success);
                    break;

                case ResultStatus.EXISTS:
                    ToastService.ShowToast("Course is already saved", ToastLevel.Warning);
                    break;

                default:
                    ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
                    break;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : CoursesIndex.SaveCourseAsync() :: {ex.Message}");
            ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
        }

    }


    private async Task GetAllCoursesAsync()
    {
        selectedCategory = "All categories";
        await FetchCoursesAsync(() => GraphQLService.GetAllCoursesAsync());
    }

    private async Task GetCoursesByCategory(string category)
    {
        selectedCategory = category;
        await FetchCoursesAsync(() => GraphQLService.GetAllCoursesByCategoryAsync(category));
    }

    private async Task HandleSearchInputAsync(ChangeEventArgs e)
    {
       

        isSearch = true;
        await FetchCoursesAsync(() => GraphQLService.SearchCoursesAsync(e.Value!.ToString()!));
    }

    private async Task FetchCoursesAsync(Func<Task<List<CourseBoxModel>>> fetchCourses)
    {
        
        try
        {
            courses = await fetchCourses();
        }
        catch (Exception ex)
        {
            isError = true;
            Logger.LogError($"ERROR : CoursesIndex.FetchCoursesAsync() :: {ex.Message}");
        }
        finally
        {
            isDropdownOpen = false;
         
        }
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }


    private sealed class CourseSearchModel
    {
        public string SelectedCategory { get; set; } = "all";
        public string SearchQuery { get; set; } = string.Empty;
        
    }

  


    
}
