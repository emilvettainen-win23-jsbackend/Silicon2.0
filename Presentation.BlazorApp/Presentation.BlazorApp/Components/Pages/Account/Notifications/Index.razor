@page "/account/notifications"
@using System.ComponentModel.DataAnnotations
@using Infrastructure.Dtos.User
@using Infrastructure.Helpers.Responses

@* @inject IHttpContextAccessor HttpContextAccessor *@

@rendermode InteractiveServer

<section class="account-notifications">
    <div class="container">
        <div class="d-flex flex-column gap-4">
            <h2>Notifications</h2>
            <div class="manage-notifications">

                <EditForm FormName="notify" Model="NotifyForm" method="post" OnSubmit="HandleSubmitAsync" Enhance novalidate>
                    
                    <div class="content">
                       
                        <div id="form-notify" class="input-group">
                            <label for="email-notify">Preferd email for notifications</label>
                            <InputText id="email-notify" @bind-Value="NotifyForm.Email" class="form-control" placeholder="example@gmail.com" />
                            <ValidationMessage For="() => NotifyForm.Email" class="text-danger" />
                        </div>

                        <div id="form-newsletter" class="input-group">
                            <div class="btn-switch">
                                <label class="switch" for="newsletter-toggle">
                                    <InputCheckbox @bind-Value="NotifyForm.Newsletter" id="newsletter-toggle" />
                                    <span class="slider round"></span>
                                </label>
                                <label>Subscribe to Newsletter</label>
                            </div>
                        </div>

                        <div id="form-darkmode" class="input-group">
                            <div class="btn-switch">
                                <label class="switch" for="theme-toggle">
                                    <InputCheckbox @bind-Value="NotifyForm.DarkMode" id="theme-toggle" />
                                    <span class="slider round"></span>
                                </label>
                                <label>Use Dark Mode Theme in Application</label>
                            </div>
                        </div>

                        <div id="form-buttons">
                            <button disabled="@IsBusy" class="btn-gray-small" type="reset">Cancel</button>
                            <button disabled="@IsBusy" class="btn-theme-small" type="submit">
                                @if (IsBusy)
                                {
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                                <span>Save changes</span>
                            </button>
                        </div>
                    </div>

                </EditForm>


            </div>
        

        </div>
    </div>
</section>

@code {


    private bool IsBusy;
    private UserDto user = default!;

    [SupplyParameterFromForm(FormName ="notify")]
    private NotifyModel NotifyForm { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync();

        NotifyForm.Email ??= user.NewsletterEmail ?? string.Empty;
        NotifyForm.Newsletter = user.Newsletter;
        NotifyForm.DarkMode = user.DarkMode;

    }

    private async Task HandleSubmitAsync()
    {

        try
        {
            var result = await UserService.HandleNotificationsFormAsync(user.Id!, NotifyForm.Email!, NotifyForm.Newsletter, NotifyForm.DarkMode);
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    // var theme = NotifyForm.DarkMode ? "dark" : "light";
                    // HttpContext.Session.SetString("DarkMode", theme);

                    NavigationManager.NavigateTo("account/notifications");


                    break;

                case ResultStatus.ERROR:
                    break;

                default:
                    break;
            }
        }
        catch (Exception)
        {

            throw;
        }



    }


    private sealed class NotifyModel
    {
        [DataType(DataType.EmailAddress)]
        public string? Email { get; set; }

        public bool Newsletter { get; set; } = false;

        public bool DarkMode { get; set; } = false;
    }

}
