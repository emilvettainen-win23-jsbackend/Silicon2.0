@page "/account/savedcourses"


@using Infrastructure.Helpers.Responses
@using Presentation.BlazorApp.Models.Courses
@attribute [StreamRendering]

<section class="account-saved-courses">
    <div class="container">
        <div class="d-flex flex-column">

            
                <div class="saved-items">
                    <h2>Saved Items</h2>
                <button @onclick="RemoveCoursesAsync" class="btn-danger-medium delete-all"><i class="fa-regular fa-trash"></i>Delete all</button>
                </div>


                @if (courses == null && !IsError)
                {
                    <div class="spinner-border m-5" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                
                }
                else if (IsError)
                {
                    <div>
                        <h6 class="pt-5 text-center">We were unable to fetch the courses at this moment due to a technical error. Please try again later. If the problem persists, contact our support at support@example.com.</h6>
                    </div>
                }
                else if (courses != null && courses.Any())
                {
                    <Presentation.BlazorApp.Components.Shared.CourseBox @rendermode="InteractiveServer" IsSavedCourses="true" courses="courses" />
                }
                else
                {
                    <div><h5 class="pt-4">No saved courses</h5></div>
                }
                
              
        </div>
    </div>
</section>
@code {

    private bool IsError;

    private CourseBoxModel[]? courses;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(3000);

        courses = new CourseBoxModel[]
        {
            new CourseBoxModel
            {
            Id = "1",
            CourseTitle = "Introduction to Blazor",
            IsBestseller = true,
            CourseImageUrl = "12345",

            Author = new AuthorModel
            {
                FullName = "testtest"
            },
            Price = new PriceModel
            {
                OriginalPrice = 12.50M,
                DiscountPrice = 10.00M
            },
            Included = new IncludedModel
            {
                HoursOfVideo = 20
            },
            Rating = new RatingModel
            {
                InNumbers = 200,
                InProcent = 96
            }

            

            }
        };
    }

        

    
    
        
    


    private async Task RemoveCoursesAsync()
    {
        try
        {
            var user = await UserService.GetCurrentUserAsync();
            var result = await CourseService.DeleteAllCoursesAsync(user.Id);
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    break;

                case ResultStatus.SERVER_ERROR:
                    
                    break;

                default:
                    break;
            }
        }
        catch (Exception)
        {

           
        }


        
    }

}
