@page "/account/savedcourses"


@using Infrastructure.Helpers.Responses
@using Presentation.BlazorApp.GraphQL
@using Presentation.BlazorApp.Models.Courses

@inject GraphQLService GraphQLService

@attribute [StreamRendering]
@rendermode @(new InteractiveServerRenderMode(false))

<section class="account-saved-courses">
    <div class="container">
        <div class="d-flex flex-column">

            
                <div class="saved-items">
                    <h2>Saved Items</h2>
                <button disabled="@isLoading" @onclick="RemoveAllCoursesAsync" class="btn-danger-medium delete-all"><i class="fa-regular fa-trash"></i>Delete all</button>
                </div>


                @if (isLoading && !isError)
                {
                    <div class="d-flex justify-content-center">
                        <div class="spinner-border m-5" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                   
                
                }
                else if (isError)
                {
                    <div>
                        <h6 class="pt-5 text-center">We were unable to fetch the courses at this moment due to a technical error. Please try again later. If the problem persists, contact our support at support@example.com.</h6>
                    </div>
                }
                else if (courses != null && courses.Any())
                {
                    <Presentation.BlazorApp.Components.Shared.CourseBox @rendermode="InteractiveServer" IsSavedCourses="true" courses="courses" />
                }
                else
                {
                    <div><h5 class="pt-4">No saved courses</h5></div>
                }
                
              
        </div>
    </div>
</section>
@code {

    private bool isLoading;
    private bool isError;

    private List<CourseBoxModel>? courses;

    protected override async Task OnInitializedAsync()
    {
        if (courses == null)
        {
            await LoadSavedCoursesAsync();
        }


    }



    private async Task LoadSavedCoursesAsync()
    {
        try
        {
            isLoading = true;
            await Task.Delay(5000);
            var user = await UserService.GetCurrentUserAsync();
            var savedCourses = await CourseService.GetSavedCourseAsync(user.Id);
            courses = await GraphQLService.GetCoursesByIdsAsync(savedCourses);
        }
        catch (Exception)
        {

            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

        

    
    
        
    


    private async Task RemoveAllCoursesAsync()
    {
        try
        {
            var user = await UserService.GetCurrentUserAsync();
            var result = await CourseService.DeleteAllCoursesAsync(user.Id);
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    break;

                case ResultStatus.SERVER_ERROR:
                    
                    break;

                default:
                    break;
            }
        }
        catch (Exception)
        {

           
        }


        
    }

}
