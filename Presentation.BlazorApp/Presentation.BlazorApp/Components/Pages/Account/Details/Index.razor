@page "/account/details"
<PageTitle>Account Details</PageTitle>

@inject ILogger<Index> Logger
@rendermode InteractiveServer

<section class="account-details">
    <div class="container">
        <div class="d-flex flex-column gap-4">
            <h2>Account Details</h2>
            <div class="basic-info">
                <h5>Basic Info</h5>
                <EditForm method="post" Model="BasicInfoForm" FormName="basic" OnValidSubmit="SaveBasicInfoAsync" Enhance novalidate>
                    <DataAnnotationsValidator />
                    <div class="content">
                        <div id="form-firstname" class="input-group">
                            <label>First name</label>
                            @if (IsExternalAccount)
                            {
                                <InputText @bind-Value="BasicInfoForm.FirstName" class="form-control non-clickable" readonly />
                            }
                            else
                            {
                                <InputText @bind-Value="BasicInfoForm.FirstName" class="form-control" />
                                <ValidationMessage For="() => BasicInfoForm.FirstName" class="text-danger" />
                            }
                        </div>
                        <div id="form-lastname" class="input-group">
                            <label>Lastname</label>
                            @if (IsExternalAccount)
                            {
                                <InputText @bind-Value="BasicInfoForm.LastName" class="form-control non-clickable" readonly />
                            }
                            else
                            {
                                <InputText @bind-Value="BasicInfoForm.LastName" class="form-control" />
                                <ValidationMessage For="() => BasicInfoForm.LastName" class="text-danger" />
                            }
                        </div>
                        <div id="form-email" class="input-group">
                            <label>Email</label>
                            <InputText @bind-Value="BasicInfoForm.Email" class="form-control non-clickable" readonly />
                        </div>
                        <div id="form-phone" class="input-group">
                            <label>Phone <span>(optional)</span></label>
                            <InputText @bind-Value="BasicInfoForm.Phone" class="form-control" />
                            <ValidationMessage For="() => BasicInfoForm.Phone" class="text-danger" />
                        </div>
                        <div id="form-bio" class="input-group">
                            <label>Bio <span>(optional)</span></label>
                            <InputTextArea @bind-Value="BasicInfoForm.Biography" class="form-control" rows="3"></InputTextArea>
                            <ValidationMessage For="() => BasicInfoForm.Biography" class="text-danger" />
                        </div>
                        <div id="form-buttons">
                            <button @onclick="ResetBasicInfoForm" class="btn-gray-small" type="button"> Cancel</button>
                            <button disabled="@IsBusy" id="form-submit" class="btn-theme-small" type="submit">
                                @if (IsBusy)
                                {
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                                <span>Save changes</span>
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
            <hr />
            <div class="address-info">
                <h5>Address</h5>
                <EditForm FormName="address" Model="AddressInfoForm" OnValidSubmit="SaveAddressInfoAsync" method="post" Enhance novalidate>
                    <DataAnnotationsValidator />
                    <div class="content">
                        <div id="form-address-1" class="input-group">
                            <label for="address1">Address line 1</label>
                            <InputText id="address1" @bind-Value="AddressInfoForm.Addressline_1" class="form-control" />
                            <ValidationMessage For="() => AddressInfoForm.Addressline_1" class="text-danger" />
                        </div>
                        <div id="form-address-2" class="input-group">
                            <label for="address2">Address line 2 <span>(optional)</span></label>
                            <InputText id="adress2" @bind-Value="AddressInfoForm.Addressline_2" class="form-control" />
                        </div>
                        <div id="form-postalcode" class="input-group">
                            <label for="postalcode">PostalCode</label>
                            <InputText id="postalcode" @bind-Value="AddressInfoForm.PostalCode" class="form-control" />
                            <ValidationMessage For="() => AddressInfoForm.PostalCode" class="text-danger" />
                        </div>
                        <div id="form-city" class="input-group">
                            <label for="city">City</label>
                            <InputText id="city" @bind-Value="AddressInfoForm.City" class="form-control" />
                            <ValidationMessage For="() => AddressInfoForm.City" class="text-danger" />
                        </div>
                        <div id="form-buttons">
                            <button @onclick="ResetAddressInfoForm" class="btn-gray-small" type="button"> Cancel</button>
                            <button disabled="@IsBusy" id="form-submit" class="btn-theme-small" type="submit">
                                @if (IsBusy)
                                {
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                                <span>Save changes</span>
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</section>



@code {
    private bool IsExternalAccount;
    private bool IsBusy;
    private UserDto user = default!;



    [SupplyParameterFromForm(FormName ="basic")]
    private BasicInfoModel BasicInfoForm { get; set; } = new();


    [SupplyParameterFromForm(FormName ="address")]
    private AddressInfoModel AddressInfoForm { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync();
        IsExternalAccount = user.IsExternalAccount;
        BasicInfoForm.FirstName = user.FirstName;
        BasicInfoForm.LastName = user.LastName;
        BasicInfoForm.Email = user.Email;
        BasicInfoForm.Phone = user.Phone;
        BasicInfoForm.Biography = user.Biography;

        var addressInfo = await AddressService.GetAddressInfoAsync(user.Id);
        AddressInfoForm = new AddressInfoModel { Addressline_1 = addressInfo!.StreetName, Addressline_2 = addressInfo.OptionalAddress, PostalCode = addressInfo.PostalCode, City = addressInfo.City};

    }


    private async Task SaveBasicInfoAsync()
    {
        try
        {
            IsBusy = true;
            var result = await UserService.UpdateBasicInfoAsync(user.Id, UserFactory.UpdateUserDto(BasicInfoForm.FirstName, BasicInfoForm.LastName, BasicInfoForm.Phone!, BasicInfoForm.Biography!));
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    await Swal.FireAsync("Info", "Was updated successfully", SweetAlertIcon.Success);
                    NavigationManager.Refresh();
                    break;

                case ResultStatus.ERROR:
                    break;

                default:
                    break;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : AccountDetails.SaveBasicInfoAsync() :: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }


    private async Task SaveAddressInfoAsync()
    {
        try
        {
            IsBusy = true;
            var result = await AddressService.CreateOrUpdateAddressInfoAsync(user.Id, AddressFactory.CreateAddressDto(AddressInfoForm.Addressline_1, AddressInfoForm.Addressline_2, AddressInfoForm.PostalCode, AddressInfoForm.City));
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    NavigationManager.Refresh();

                    break;

                case ResultStatus.ERROR:
                    break;

                default:
                    break;

            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : AccountDetails.SaveAddressInfoAsync() :: {ex.Message}");
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void ResetBasicInfoForm()
    {
        BasicInfoForm.FirstName = "";
        BasicInfoForm.LastName = "";
        BasicInfoForm.Email = user.Email;
        BasicInfoForm.Phone = "";
        BasicInfoForm.Biography = "";
    }


    private void ResetAddressInfoForm()
    {
        AddressInfoForm.Addressline_1 = "";
        AddressInfoForm.Addressline_2 = "";
        AddressInfoForm.PostalCode = "";
        AddressInfoForm.City = "";
    }



}