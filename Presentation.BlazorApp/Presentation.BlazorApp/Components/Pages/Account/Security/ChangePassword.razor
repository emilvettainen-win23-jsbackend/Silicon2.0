@using System.ComponentModel.DataAnnotations
@using Infrastructure.Dtos.User
@using Infrastructure.Helpers.Responses
@using Presentation.BlazorApp.Components.Shared
<div class="change-password">
    @if (!ShowVerificationForm)
    {
        <h5>Password</h5>
        <EditForm FormName="change-password" method="post" Model="ChangePasswordForm" OnValidSubmit="ChangePasswordAsync" Enhance novalidate>
            <DataAnnotationsValidator />
            <div class="content">
                <div id="form-current-password" class="input-group">
                    <label for="current">Current password</label>
                    <InputText id="current" @bind-Value="ChangePasswordForm.CurrentPassword" class="form-control" type="password" />
                    <ValidationMessage For="() => ChangePasswordForm.CurrentPassword" class="text-danger" />
                </div>
                <div id="form-new-password" class="input-group">
                    <label for="new">New password</label>
                    <InputText id="new" @bind-Value="ChangePasswordForm.NewPassword" class="form-control" type="password" />
                    <ValidationMessage For="() => ChangePasswordForm.NewPassword" class="text-danger" />
                </div>
                <div id="form-confirm-password" class="input-group">
                    <label for="confirm">Confirm password</label>
                    <InputText id="confirm" @bind-Value="ChangePasswordForm.ConfirmPassword" class="form-control" type="password" />
                    <ValidationMessage For="() => ChangePasswordForm.ConfirmPassword" class="text-danger" />
                </div>
                <div id="form-buttons">
                    <button disabled="@IsBusy" class="btn-gray-small" type="reset">Cancel</button>
                    <button disabled="@IsBusy" class="btn-theme-small" type="submit">
                        @if (IsBusy)
                        {
                            <div class="spinner-border spinner-border-sm" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                        <span>Change password</span>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <h5>Verify</h5>
        <p>An email was send with verification code</p>
        <ResendButton Email="@user.Email" @rendermode="InteractiveServer" />
        <EditForm FormName="verify" method="post" Model="VerifyPasswordForm" OnValidSubmit="VerifyPasswordChangeAsync" novlidate>
            <DataAnnotationsValidator />
            <div class="content">
                <div id="form-code" class="input-group">
                    <label for="verify-code">Code</label>
                    <InputText id="verify-code" @bind-Value="VerifyPasswordForm.Code" class="form-control" />
                    <ValidationMessage For="() => VerifyPasswordForm.Code" class="text-danger" />
                </div>
                <button disabled="@IsBusy" class="btn-gray-small" type="reset">Cancel</button>
                <button disabled="@IsBusy" class="btn-theme-small" type="submit">
                    @if (IsBusy)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    <span>Confirm</span>
                </button>
            </div>
        </EditForm>
    }
</div>




@code {

    private bool ShowVerificationForm;
    private bool IsBusy;

    [Parameter]
    public UserDto user { get; set; } = null!;





    [SupplyParameterFromForm(FormName = "change-password")]
    private ChangePasswordModel ChangePasswordForm { get; set; } = new();


    [SupplyParameterFromForm(FormName = "verify")]
    private VerifyPasswordModel VerifyPasswordForm { get; set; } = new();



    private async Task ChangePasswordAsync()
    {
        IsBusy = true;
        try
        {
            var currentPassword = await UserService.VerifyCurrentPasswordAsync(user.Id, ChangePasswordForm.CurrentPassword);
            if (!currentPassword)
            {
                return;
            }

            //cancellationtoken ???
            var verification = await Http.PostAsJsonAsync($"{Config["URI:GenerateCode"]}", new { Email = user.Email });
            if (verification.IsSuccessStatusCode)
            {
                ShowVerificationForm = true;
            }
            else
            {
                return;
            }
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            IsBusy = false;
        }
    }

    private async Task VerifyPasswordChangeAsync()
    {
        IsBusy = true;
        try
        {
            var validateResult = await Http.PostAsJsonAsync($"{Config["URI:ValidateCode"]}", new { Email = user.Email, Code = VerifyPasswordForm.Code });
            if (!validateResult.IsSuccessStatusCode)
            {
                //resend code and try again.
                return;
            }

            var result = await UserService.UpdatePasswordAsync(user.Id, ChangePasswordForm.CurrentPassword, ChangePasswordForm.NewPassword);
            switch (result.StatusCode)
            {
                case ResultStatus.OK:
                    ShowVerificationForm = false;
                    ChangePasswordForm = new();


                    break;

                case ResultStatus.ERROR:
                    break;

                default:
                    break;
            }


        }
        catch (Exception)
        {
            //serverfel

        }
        finally
        {
            VerifyPasswordForm = new();
            IsBusy = false;
        }

    }

    // private async Task ResendCodeAsync()
    // {
    //     try
    //     {
    //         var verification = await Http.PostAsJsonAsync($"{Config["URI:GenerateCode"]}", new { Email = user.Email });
    //         if (verification.IsSuccessStatusCode)
    //         {
    //             return;
    //         }
    //         else
    //         {
    //             return;
    //         }

    //     }
    //     catch (Exception)
    //     {

    //         throw;
    //     }

    // }


    private sealed class VerifyPasswordModel
    {
        [Required]
        public string Code { get; set; } = null!;
    }


    private sealed class ChangePasswordModel
    {
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; } = null!;


        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is required")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$", ErrorMessage = "Password must be at least 8 characters long and include uppercase, lowercase, numeric, and special characters.")]
        public string NewPassword { get; set; } = null!;


        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Please Confirm your password")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = null!;
    }

}
