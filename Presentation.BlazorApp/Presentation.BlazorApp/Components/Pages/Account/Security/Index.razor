@page "/account/security"
<PageTitle>Account Security</PageTitle>


<section class="account-security">
    <div class="container">
        <div class="d-flex flex-column gap-4">
            @if (IsExternalAccount)
            {
                <div class="delete-account">
                    <h5>Delete Account</h5>
                    <EditForm FormName="delete" method="post" Model="DeleteAccountForm" OnValidSubmit="DeleteAccountAsync" novalidate>
                        <DataAnnotationsValidator />
                        <div class="content">
                            <p class="text-m">When you delete your account, your public profile will be deactivated immediately. If you change your mind before the 14 days are up, sign in with your email and password, and we’ll send you a link to reactivate your account.</p>
                            <div id="form-delete" class="checkbox-group">
                                <InputCheckbox id="delete-account" @bind-Value="DeleteAccountForm.DeleteAccount" class="form-check-input" />
                                <label for="delete-account">Yes, I want to delete my account</label>
                                <ValidationMessage For="() => DeleteAccountForm.DeleteAccount" class="text-danger" />
                            </div>
                            <button class="btn-theme-small" type="submit">Delete</button>
                        </div>
                    </EditForm>
                </div>
            }
            else
            {
                <h2>Security</h2>
                <ChangePassword user="@user" @rendermode="InteractiveServer" />
                <hr />
                <div class="delete-account">
                    <h5>Delete Account</h5>
                    <EditForm FormName="delete" method="post" Model="DeleteAccountForm" OnValidSubmit="DeleteAccountAsync" novalidate>
                        <DataAnnotationsValidator />
                        <div class="content">
                            <p class="text-m">When you delete your account, your public profile will be deactivated immediately. This can´t be undone!</p>
                            <div id="form-delete" class="checkbox-group">
                                <InputCheckbox id="delete-account" @bind-Value="DeleteAccountForm.DeleteAccount" class="form-check-input" />
                                <label for="delete-account">Yes, I want to delete my account</label>
                                <ValidationMessage For="() => DeleteAccountForm.DeleteAccount" class="text-danger" />
                            </div>
                            <button class="btn-theme-small" type="submit">Delete</button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
</section>



@code {

    private UserDto user = default!;
    private bool IsExternalAccount;


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    [SupplyParameterFromForm(FormName = "delete")]
    private DeleteAccountModel DeleteAccountForm { get; set; } = new();



    protected override async Task OnInitializedAsync()
    {
        user = await UserService.GetCurrentUserAsync();
        IsExternalAccount = user.IsExternalAccount;
    }


    private async Task DeleteAccountAsync()
    {
        var currentUser = await UserManager.FindByIdAsync(user.Id);
        if (currentUser != null)
        {
            var deleteResult = await UserManager.DeleteAsync(currentUser);
            if (deleteResult.Succeeded)
            {
                await SignInManager.SignOutAsync();
                NavigationManager.NavigateTo("/");
                return;
            }
            ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
        }
    }


    private sealed class DeleteAccountModel
    {
        [Required]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must confirm")]
        public bool DeleteAccount { get; set; } = false;
    }

}
