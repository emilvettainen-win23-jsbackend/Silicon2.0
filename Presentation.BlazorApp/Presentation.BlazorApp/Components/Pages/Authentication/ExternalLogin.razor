@page "/Account/ExternalLogin"
<PageTitle>Register</PageTitle>

@using System.Security.Claims
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities


@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject NavigationManager NavigationManager
@inject ILogger<ExternalLogin> Logger



<section class="externallogin-section">
    <div class="container">
        <div class="content">
            <div id="content-alert">
                @if (Alert != null)
                {
                    <div class="alert alert-@Alert.Icon" role="alert">
                        @Alert.Message
                    </div>
                }
            </div>
            <div id="content-info">
                <div class="alert alert-info">
                    You've successfully authenticated with <strong>@ProviderDisplayName</strong>.
                    Please enter an email address for this site below and click the Register button to finish
                    logging in.
                </div>
                <h2>Associate your @ProviderDisplayName account.</h2>
            </div>
            <div id="content-form">
                <EditForm Model="Input" OnValidSubmit="OnValidSubmitAsync" FormName="confirmation" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="email" placeholder="Please enter your email." />
                        <label for="email" class="form-label">Email</label>
                    </div>
                    <button type="submit" class="btn-theme-medium">Register</button>
                </EditForm>
            </div>
        </div>
    </div>
</section>

@code {
    public const string LoginCallbackAction = "LoginCallback";
    private AlertModel1? Alert { get; set; }
    private string? message;
    private ExternalLoginInfo externalLoginInfo = default!;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? RemoteError { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private string? Action { get; set; }

    private string? ProviderDisplayName => externalLoginInfo.ProviderDisplayName;

    protected override async Task OnInitializedAsync()
    {
        if (RemoteError is not null)
        {
            NavigationManager.NavigateTo("/account/signin");
        }

        var info = await SignInManager.GetExternalLoginInfoAsync();
        if (info is null)
        {
            NavigationManager.NavigateTo("/account/signin");
        }

        externalLoginInfo = info!;

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            if (Action == LoginCallbackAction)
            {
                await OnLoginCallbackAsync();
                return;
            }
            NavigationManager.NavigateTo("/account/signin");
        }
    }

    private async Task OnLoginCallbackAsync()
    {
        var result = await SignInManager.ExternalLoginSignInAsync( externalLoginInfo.LoginProvider, externalLoginInfo.ProviderKey, isPersistent: false, bypassTwoFactor: true);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(!string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/account/details");
        }
        else if (result.IsNotAllowed)
        {
            await UserService.VerificationRequest(externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email)!);
            NavigationManager.NavigateTo($"account/registerconfirmation?email={externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Email)}&returnUrl={ReturnUrl}");
        }
    }



    private async Task OnValidSubmitAsync()
    {
        var emailStore = GetEmailStore();
        var user = CreateUser();
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.FirstName = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.GivenName)!;
        user.LastName = externalLoginInfo.Principal.FindFirstValue(ClaimTypes.Surname)!;
        user.IsExternalAccount = true;

        var result = await UserManager.CreateAsync(user);
        if (result.Succeeded)
        {
            result = await UserManager.AddLoginAsync(user, externalLoginInfo);
            if (result.Succeeded)
            {
                await UserService.VerificationRequest(Input.Email);
                NavigationManager.NavigateTo($"account/registerconfirmation?email={Input.Email}&returnUrl={ReturnUrl}");
            }
        }
        Alert = new AlertModel1
        {
            Message = string.Join(",", result.Errors.Select(error => error.Description)),
            Icon = "danger"
        };
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
