@page "/account/forgotpassword"
<PageTitle>Forgot password</PageTitle>

@inject ILogger<ForgotPassword> Logger
@rendermode InteractiveServer

<Toast />

<section id="forgot">
    <div class="container">
        @if (!ShowResetForm)
        {
            <EditForm class="form-forgot" method="post" FormName="forgot" Model="ForgotPasswordForm" OnValidSubmit="ForgotPasswordAsync" novalidate>
                <DataAnnotationsValidator />
                <h1>Forgot password</h1>
                <p>Enter your email to reset your password</p>
                <div class="content">
                    <div id="form-email" class="input-group">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="ForgotPasswordForm.Email" class="form-control" />
                        <ValidationMessage For="() => ForgotPasswordForm.Email" class="text-danger" />
                    </div>
                    <div id="form-buttons">
                        <button disabled="@IsBusy" class="btn-gray-small" type="reset">Cancel</button>
                        <button disabled="@IsBusy" class="btn-theme-small" type="submit">
                            @if (IsBusy)
                            {
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            }
                            <span>Reset password</span>
                        </button>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <div class="reset-password">
                <h1>Reset your password</h1>
                <p>Enter a new password</p>
                <p>And your verification code that was sent to your email</p>
                <ResendButton Email="@ForgotPasswordForm.Email" @rendermode="InteractiveServer" />
                <EditForm class="reset-form" method="post" FormName="reset" Model="ResetPasswordForm" OnValidSubmit="ResetPasswordAsync" novalidate>
                    <DataAnnotationsValidator />
                    <div class="content">
                        <div id="form-newpassword" class="input-group">
                            <label for="new">New password</label>
                            <InputText id="new" @bind-Value="ResetPasswordForm.NewPassword" class="form-control" type="password" />
                            <ValidationMessage For="() => ResetPasswordForm.NewPassword" class="text-danger" />
                        </div>

                        <div id="form-confirmpassword" class="input-group">
                            <label for="confirm">Confirm password</label>
                            <InputText id="confirm" @bind-Value="ResetPasswordForm.ConfirmPassword" class="form-control" type="password" />
                            <ValidationMessage For="() => ResetPasswordForm.ConfirmPassword" class="text-danger" />
                        </div>

                        <div id="form-verifycode" class="input-group">
                            <label for="code">Verification code</label>
                            <InputText id="code" @bind-Value="ResetPasswordForm.Code" class="form-control" />
                            <ValidationMessage For="() => ResetPasswordForm.Code" class="text-danger" />
                        </div>
                        <div id="form-reset-buttons">
                            <button disabled="@IsBusy" class="btn-gray-small" type="reset">Cancel</button>
                            <button disabled="@IsBusy" class="btn-theme-small" type="submit">
                                @if (IsBusy)
                                {
                                    <div class="spinner-border spinner-border-sm" role="status">
                                        <span class="visually-hidden">Loading...</span>
                                    </div>
                                }
                                <span>Confirm</span>
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        }
    </div>
</section>

@code {
    private bool ShowResetForm = false;
    private bool IsBusy = false;

    [SupplyParameterFromForm(FormName ="forgot")]
    private ForgotPasswordModel ForgotPasswordForm { get; set; } = new();


    [SupplyParameterFromForm(FormName ="reset")]
    private ResetPasswordModel ResetPasswordForm { get; set; } = new();


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    private async Task ForgotPasswordAsync()
    {
        IsBusy = true;
        try
        {
            await UserService.VerificationRequest(ForgotPasswordForm.Email);
            ShowResetForm = true;
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : ForgotPassword.ForgotPasswordAsync() :: {ex.Message}");
            ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
        }
        finally
        {
            IsBusy = false;
        }
    }


    private async Task ResetPasswordAsync()
    {
        IsBusy = true;
        try
        {
            var user = await UserManager.FindByEmailAsync(ForgotPasswordForm.Email);
            if (user == null)
            {
                ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
                return;
            }
            var validateResult = await Http.PostAsJsonAsync($"{Config["ValidateCode"]}", new { Email = ForgotPasswordForm.Email, Code = ResetPasswordForm.Code });
            if (!validateResult.IsSuccessStatusCode)
            {
                ToastService.ShowToast("That code didn’t do the trick. Let's give it another shot.", ToastLevel.Error);
                return;
            }
            var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            var result = await UserManager.ResetPasswordAsync(user, token, ResetPasswordForm.NewPassword);
            if (!result.Succeeded)
            {
                ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
                return;
            }
            ToastService.ShowToast("Password was changed. You may now proceed to sign in.", ToastLevel.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : ForgotPassword.ResetPasswordAsync() :: {ex.Message}");
            ToastService.ShowToast("Our server is having a bad day. We're on it! Please try again later!", ToastLevel.Error);
        }
        finally
        {
            ResetPasswordForm = new();
            IsBusy = false;
        }
    }


    private sealed class ForgotPasswordModel
    {
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email address is required")]
        public string Email { get; set; } = null!;
    }


    private sealed class ResetPasswordModel
    {
        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is required")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$", ErrorMessage = "Password must be at least 8 characters long and include uppercase, lowercase, numeric, and special characters.")]
        public string NewPassword { get; set; } = null!;

        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Please Confirm your password")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = null!;

        [Required]
        public string Code { get; set; } = null!;
    }

}