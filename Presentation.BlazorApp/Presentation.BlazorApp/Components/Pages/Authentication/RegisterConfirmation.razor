@page "/account/registerconfirmation"
<PageTitle>Register confirmation</PageTitle>

@inject ILogger<RegisterConfirmation> Logger


<section id="confirmation">
    <div class="container">
        <EditForm Model="VerifyForm" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="VerifyAsync" FormName="RegisterConfirmation" Enhance novalidate>
            <DataAnnotationsValidator />
            @if (Alert != null)
            {
                <div class="alert alert-@Alert.Icon" role="alert">
                    @Alert.Message
                </div>
            }
            <div class="content">
                <div id="form-info">
                    <h1>Verify your account</h1>
                    <p>Check your email for a verification code to complete your registration.</p>
                    <ResendButton Email="@Email" @rendermode="InteractiveServer" />
                </div>
                <div id="form-code" class="input-group">
                    <label for="code">Code</label>
                    <InputText id="code" @bind-Value="VerifyForm.Code" class="form-control" autocomplete="off" placeholder="Enter your verification code" />
                    <ValidationMessage For="() => VerifyForm.Code" class="text-danger" />
                </div>
                <button disabled="@IsBusy" id="form-submit" class="btn-theme-large" type="submit">
                    @if (IsBusy)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    <span id="button-text">Confirm</span>
                </button>
            </div>
        </EditForm>
    </div>
</section>



@code {

    private bool IsBusy;
    private ApplicationUser user = default!;
    private AlertModel? Alert { get; set; }
    private ExternalLoginInfo externalLoginInfo = default!;


    [SupplyParameterFromQuery]
    private string? Email { get; set; }


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    [SupplyParameterFromForm]
    private VerifyRegistrationModel VerifyForm { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var currentUser = await UserManager.FindByEmailAsync(Email);
        if (currentUser is not null)
        {
            user = currentUser;
        }
    }



    private async Task VerifyAsync()
    {
        try
        {
            var result = await Http.PostAsJsonAsync($"{Config["URI:ValidateCode"]}", new { Email = Email, Code = VerifyForm.Code });
            if (result.IsSuccessStatusCode)
            {
                user.EmailConfirmed = true;
                var updateResult = await UserManager.UpdateAsync(user);
                if (updateResult.Succeeded)
                {
                    Alert = new AlertModel { Message = "Account verified successfully. You may now proceed to sign in.", Icon = "success" };
                }
            }
            else
            {
                Alert = new AlertModel { Message = "Hmm, that code didn’t do the trick. Let's give it another shot. Resend the code!", Icon = "warning" };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : Register.SignUpAsync() :: {ex.Message}");
        }
        Alert = new AlertModel { Message = "Our server is having a bad day. We're on it! Please try again later!", Icon = "danger" };
    }


    // private async Task ResendCodeAsync()
    // {
    //     try
    //     {
    //         var result = await Http.PostAsJsonAsync($"{Config["URI:GenerateCode"]}", new { Email = Email });
    //         if (result.IsSuccessStatusCode)
    //         {
    //             //code resent
    //         }
    //         else
    //         {
    //             //try again
    //         }
    //     }
    //     catch (Exception)
    //     {
    //         //contact support
    //         throw;
    //     }

    // }

    private sealed class VerifyRegistrationModel
    {
        [Required(ErrorMessage = "Verification code is required!")]
        public string Code { get; set; } = null!;
    }


}