@page "/account/registerconfirmation"
@using Presentation.BlazorApp.Components.Shared
@using System.ComponentModel.DataAnnotations

<PageTitle>Register confirmation</PageTitle>


<section id="confirmation">
    <div class="container">
       <h1>Verify your account</h1>
       <ResendButton Email="@Email" @rendermode="InteractiveServer" />
        <EditForm Model="VerifyForm" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="VerifyAsync" FormName="RegisterConfirmation" Enhance novalidate>
            <DataAnnotationsValidator />
            <div class="content">
                <div id="form-code" class="input-group">
                    <label for="code">Code</label>
                    <InputText id="code" @bind-Value="VerifyForm.Code" class="form-control" autocomplete="off" placeholder="Enter your verification code" />
                    <ValidationMessage For="() => VerifyForm.Code" class="text-danger" />
                </div>
                <button disabled="@IsBusy" id="form-submit" class="btn-theme-large" type="submit">
                    @if (IsBusy)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    <span id="button-text">Confirm</span>
                </button>
            </div>
        </EditForm>
    </div>
</section>



@code {

    private bool IsBusy;

    private ApplicationUser user = default!;


    [SupplyParameterFromQuery]
    private string? Email { get; set; }


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    [SupplyParameterFromForm]
    private VerifyRegistrationModel VerifyForm { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            NavigationManager.NavigateTo("/");
            return;
        }

        var currentUser = await UserManager.FindByEmailAsync(Email);
        if (currentUser is not null)
        {
            user = currentUser;

        }
    }


    private async Task VerifyAsync()
    {
        var result = await Http.PostAsJsonAsync($"{Config["URI:ValidateCode"]}", new { Email = Email, Code = VerifyForm.Code });
        if (result.IsSuccessStatusCode)
        {
            user.EmailConfirmed = true;
            var updateResult = await UserManager.UpdateAsync(user);
            if (updateResult.Succeeded)
            {
                NavigationManager.NavigateTo($"account/signin?returnUrl={ReturnUrl}");
            }
        }
    }

 
    private sealed class VerifyRegistrationModel
    {
        [Required(ErrorMessage = "Verification code is required!")]
        public string Code { get; set; } = null!;
    }


}