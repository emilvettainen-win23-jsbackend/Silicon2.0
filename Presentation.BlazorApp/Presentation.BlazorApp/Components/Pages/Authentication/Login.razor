@page "/account/signin"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject ILogger<Login> Logger






<PageTitle>Sign In</PageTitle>

<section id="signin">
    <div class="container">
        <EditForm Model="SignInForm" method="post" FormName="signin" OnValidSubmit="SignInAsync" Enhance novalidate>
            <DataAnnotationsValidator />
            <h1>Welcome Back</h1>
            <p>Don´t have an account yet? <a href="account/signup">Sign up here.</a></p>
            <div class="content">
                <div id="form-email" class="input-group">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="SignInForm.Email" class="form-control" />
                    <ValidationMessage For="() => SignInForm.Email" class="text-danger" />
                </div>
                <div id="form-password" class="input-group">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="SignInForm.Password" class="form-control" type="password" />
                    <ValidationMessage For="() => SignInForm.Password" class="text-danger" />
                </div>
                <div id="form-remember" class="checkbox-group">
                    <InputCheckbox id="remember" @bind-Value="SignInForm.RememberMe" class="form-check-input" />
                    <label for="remember">Remember me</label>
                </div>




                <button disabled="@IsBusy" id="form-submit" class="btn-theme-large" type="submit">
                    @if (IsBusy)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    <span>Sign In</span>
                </button>

                <a href="account/forgotpassword" id="form-forgot-password" class="text-m">Forgot your password?</a>
                <hr id="form-hr" />
                <div id="external-signin">
                    <h6>Or sign in with your social network</h6>
                    <a class="btn-gray-medium"><i class="fa-brands fa-google"></i>Google</a>
                    <a class="btn-gray-medium"><i class="fa-brands fa-facebook-f"></i>Facebook</a>
                </div>
            </div>
        </EditForm>
    </div>
</section>


@code {
    private bool IsBusy;


    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    [SupplyParameterFromForm]
    private SignInModel SignInForm { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }

    }


    private async Task SignInAsync()
    {
        var result = await SignInManager.PasswordSignInAsync(SignInForm.Email, SignInForm.Password, SignInForm.RememberMe, false);
        if (result.Succeeded)
        {
            NavigationManager.NavigateTo(ReturnUrl ?? "/account/details");
        }
        else if (result.IsNotAllowed)
        {
            // await UserService.VerificationRequest(SignInForm.Email);
            NavigationManager.NavigateTo($"account/registerconfirmation?email={SignInForm.Email}&returnUrl={ReturnUrl}");
        }
        else
        {

            // incorret email or password
        }
    }

    private sealed class SignInModel
    {
        [DataType(DataType.EmailAddress)]
        [Required(ErrorMessage = "Email address is required")]
        public string Email { get; set; } = null!;

        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = null!;

        public bool RememberMe { get; set; }
    }

}
