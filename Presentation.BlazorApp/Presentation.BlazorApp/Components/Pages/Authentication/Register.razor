@page "/account/signup"
<PageTitle>Register</PageTitle>

@inject ILogger<Register> Logger
@rendermode InteractiveServer

<section id="signup">
    <div class="container">
        @if (Alert != null)
        {
            <div class="alert alert-@Alert.Icon" role="alert">
                @Alert.Message
            </div>
        }
        <EditForm Model="SignUpForm" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="SignUpAsync" FormName="register" novalidate>
            <DataAnnotationsValidator />
            <h1>Create Account</h1>
            <p>Already have an account? <a href="/account/signin">Sign in here.</a></p>
            <div class="content">
                <div id="form-firstname" class="input-group">
                    <label for="first-name">First name</label>
                    <InputText id="first-name" @bind-Value="SignUpForm.FirstName" class="form-control" placeholder="Enter your first name" />
                    <ValidationMessage For="() => SignUpForm.FirstName" class="text-danger" />
                </div>
                <div id="form-lastname" class="input-group">
                    <label for="last-name">Last name</label>
                    <InputText id="last-name" @bind-Value="SignUpForm.LastName" class="form-control" placeholder="Enter your last name" />
                    <ValidationMessage For="() => SignUpForm.LastName" class="text-danger" />
                </div>
                <div id="form-email" class="input-group">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="SignUpForm.Email" class="form-control" placeholder="Enter your email" />
                    <ValidationMessage For="() => SignUpForm.Email" class="text-danger" />
                </div>
                <div id="form-password" class="input-group">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="SignUpForm.Password" class="form-control" placeholder="Enter your password" type="password" />
                    <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
                </div>
                <div id="form-confirm" class="input-group">
                    <label for="confirm-password">Confirm password</label>
                    <InputText id="confirm-password" @bind-Value="SignUpForm.ConfirmPassword" class="form-control" placeholder="Enter your password again" type="password" />
                    <ValidationMessage For="() => SignUpForm.ConfirmPassword" class="text-danger" />
                </div>
                <div id="form-terms" class="checkbox-group">
                    <InputCheckbox id="terms" @bind-Value="SignUpForm.TermsAndConditions" class="form-check-input" />
                    <label for="terms">I agree to the <NavLink href="/terms">Terms</NavLink> & <NavLink href="/conditions">Conditions</NavLink> </label>
                    <ValidationMessage For="() => SignUpForm.TermsAndConditions" class="text-danger" />
                </div>
                <button disabled="@IsBusy" id="form-submit" type="submit" class="btn-theme-large">
                    @if (IsBusy)
                    {
                        <div class="spinner-border spinner-border-sm" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                    <span>Sign Up</span>
                </button>
            </div>
        </EditForm>
    </div>
</section>

@code {
    private bool IsBusy;
    private AlertModel? Alert { get; set; }


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    [SupplyParameterFromForm]
    private SignUpModel SignUpForm { get; set; } = new();


    public async Task SignUpAsync(EditContext editContext)
    {
        IsBusy = true;
        try
        {
            var user = new ApplicationUser { UserName = SignUpForm.Email, Email = SignUpForm.Email, FirstName = SignUpForm.FirstName, LastName = SignUpForm.LastName, Created = DateTime.Now };
            var createdResult = await UserService.CreateUserAsync(user, SignUpForm.Password);
            switch (createdResult.StatusCode)
            {
                case ResultStatus.OK:

                    await UserService.VerificationRequest(SignUpForm.Email);
                    NavigationManager.NavigateTo($"account/registerconfirmation?email={SignUpForm.Email}&returnUrl={ReturnUrl}");
                    break;

                case ResultStatus.EXISTS:
                    Alert = new AlertModel { Message = "The email you entered is already associated with an account. Please use a different email or reset your password if you forgot it.", Icon = "warning" };
                    break;

                default:
                    Alert = new AlertModel { Message = "Our server is having a bad day. We're on it! Please try again later!", Icon = "danger" };
                    break;
            }

        }
        catch (Exception ex)
        {
            Logger.LogError($"ERROR : Register.SignUpAsync() :: {ex.Message}");
            Alert = new AlertModel { Message = "Our server is having a bad day. We're on it! Please try again later!", Icon = "danger" };
        }
        finally
        {
            IsBusy = false;
        }
    }


    private sealed class SignUpModel
    {
        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = null!;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = null!;

        [DataType(DataType.EmailAddress)]

        [Required(ErrorMessage = "Email address is required")]
        [RegularExpression(@"^(([^<>()\]\\.,;:\s@\""]+(\.[^<>()\]\\.,;:\s@\""]+)*)|("".+""))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$", ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = null!;

        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Password is required")]
        [RegularExpression("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$", ErrorMessage = "Password must be at least 8 characters long and include uppercase, lowercase, numeric, and special characters.")]
        public string Password { get; set; } = null!;

        [DataType(DataType.Password)]
        [Required(ErrorMessage = "Please Confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = null!;

        [Required]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must accept the terms and conditions")]
        public bool TermsAndConditions { get; set; } = false;
    }


}