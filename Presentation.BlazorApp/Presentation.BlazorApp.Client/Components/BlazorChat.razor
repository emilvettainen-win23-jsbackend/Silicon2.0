@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json.Serialization

@rendermode InteractiveAuto
@inject NavigationManager NavigationManager


<div class="chat-container">
    @if (!_isChatting)
    {
        <div class="start-chat-container">
            <p>
                Enter your name to start chatting:
            </p>
            <input class="form-control" type="text" maxlength="32" @bind="@_username" />
            <button class="btn-theme-medium"  type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
            @if (_message != null)
            {
                <div class="invalid-feedback">@_message</div>
                <small id="emailHelp" class="form-text text-muted">@_message</small>
            }
        </div>
    }
    else
    {
        <div class="chat-window">
            <div class="alert alert-secondary d-flex align-items-center justify-content-between mt-4" role="alert">
                <span>
                    <span class="oi oi-person mr-2" aria-hidden="true"></span>
                    You are connected as <b>@_username</b>
                </span>
                <button class="btn btn-sm btn-warning" @onclick="DisconnectAsync">Disconnect</button>
            </div>
            <div id="scrollbox" class="message-box">
                @foreach (var item in _messages)
                {
                    if (item.IsNotice)
                    {
                        <div class="alert alert-info">@item.Body</div>
                    }
                    else
                    {
                        <div class="message-bubble @item.CSS">
                            <div class="user">
                                <b>@item.Username</b> <small>(@item.Timestamp.ToString("HH:mm"))</small>
                            </div>
                            <div class="msg">@item.Body</div>
                        </div>
                    }
                }
                <div class="typing-container">
                    @if (!string.IsNullOrEmpty(_typingUser))
                    {
                        <p>@_typingUser is typing <span class="typing-indicator">...</span></p>
                    }
                </div>
            </div>
            <div class="input-group mt-2">
                <textarea class="form-control" placeholder="Send a message..." @bind="_newMessage" @oninput="NotifyTyping"></textarea>
                <div class="input-group-append">
                    <button class="btn-theme-medium" @onclick="@(() => SendAsync(_newMessage))">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    }
</div>



@code {
    private bool _isChatting = false;
    private string? _username;
    private string? _typingUser;
    private string? _message;
    private string? _newMessage;
    private List<Message> _messages = new List<Message>();
    private string? _hubUrl;
    private HubConnection? _hubConnection;
    private System.Timers.Timer? _typingTimer;



    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (_isChatting)
        {
            _ = DisconnectAsync();
        }
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }


    public async Task Chat()
    {
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        };

        try
        {
            _isChatting = true;
            await Task.Delay(1);
            _messages.Clear();

            _hubConnection = new HubConnectionBuilder()
                   .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                   .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);
            _hubConnection.On<string>("UserTyping", HandleUserTyping);

            await _hubConnection.StartAsync();
            

            
            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }


    private async Task NotifyTyping() => await _hubConnection!.SendAsync("Typing", _username);

    private void HandleUserTyping(string typingUserName)
    {
        _typingUser = typingUserName;
        InvokeAsync(StateHasChanged);

        _typingTimer?.Stop();
        _typingTimer = new System.Timers.Timer(2000);
        _typingTimer.Elapsed += (s, e) =>
        {
            _typingUser = null;
            InvokeAsync(StateHasChanged);
        };

        _typingTimer.Start();
    }


    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);

        _messages.Add(new Message(name, message, isMine));
        InvokeAsync(StateHasChanged);
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection!.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection!.SendAsync("Broadcast", _username, message);

            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
            Timestamp = DateTime.Now;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }
        public DateTime Timestamp { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}

